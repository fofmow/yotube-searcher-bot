import hashlib
import logging
from os import environ
from aiogram import Bot, Dispatcher, executor
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputMessageContent, InputFile
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from searcher import get_videos_by_query


bot = Bot(environ.get("BOT_TOKEN"), parse_mode="HTML")
dp = Dispatcher(bot)


@dp.message_handler(commands=["start"])
async def greeting(message: Message):
    await message.answer("<b>–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ YouTube –∏ —è "
                         "–æ—Ç–ø—Ä–∞–≤–ª—é –≤ —á–∞—Ç –ø–µ—Ä–≤—ã–µ 3 –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ  ü•∑üèª</b>")

    await message.answer_photo(
        InputFile("example.png"),
        caption="<b>P.S. –ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –±–æ—Ç–∞ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é üëÜüèª</b>"
    )


@dp.message_handler(content_types=["text"])
async def send_videos(message: Message):
    if message.text.startswith("https://www.youtube.com/"):
        # –≤ —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è inline-–∑–∞–ø—Ä–æ—Å–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
        return

    videos = await get_videos_by_query(message.text)

    await message.answer("<b>–ü–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—É—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚ö°Ô∏èÔ∏è</b>")
    for v in videos:
        view_buttons = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å", url=v.url),
            InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å", callback_data=f"download::{v.url}"),
        )
        await message.answer_photo(
            photo=v.logo_url,
            caption=f"<b>{v.title}</b>\n\n<i>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {v.duration}\n"
                    f"–ö–∞–Ω–∞–ª: {v.channel}\n–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {v.views}\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {v.publish_time}</i>",
            reply_markup=view_buttons
        )


@dp.callback_query_handler(text_contains="download")
async def download_video(call: CallbackQuery):
    video_url = call.data.split("::")[-1]
    # –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pytube ...

    await call.answer("–í–æ–∑–º–æ–∂–Ω–æ, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –≤ —Å–∞–º–æ–º –ª—É—á—à–µ–º "
                      "–∫–∞—á–µ—Å—Ç–≤–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞", show_alert=True)


@dp.inline_handler()
async def inline_handler(query: InlineQuery):
    videos = [InlineQueryResultArticle(
        id=hashlib.md5(video.title.encode()).hexdigest(),
        title=video.title,
        url=video.url,
        thumb_url=video.logo_url,
        input_message_content=InputMessageContent(
            message_text=video.url
        )
    ) for video in await get_videos_by_query(query.query, max_results=5)]

    await query.answer(
        results=videos,
        cache_time=1,
        switch_pm_text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –ë–æ—Ç–∞",
        switch_pm_parameter="go"
    )


logging.basicConfig(level=logging.INFO, filename="debug.log")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
